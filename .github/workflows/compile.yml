# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: Build ProjetSuperDur

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
            generator: "Visual Studio 17 2022"
            architecture: x64
            build_type: Debug
            
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
            generator: "Visual Studio 17 2022"
            architecture: Win32
            build_type: Debug
            
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
            generator: "Visual Studio 17 2022"
            architecture: x64
            build_type: Release

          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
            generator: "Visual Studio 17 2022"
            architecture: Win32
            build_type: Release

          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
            generator: Ninja
            architecture: x64
            build_type: Debug

          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
            generator: Ninja
            architecture: x64
            build_type: Release

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/ProjetSuperDur/build" >> "$GITHUB_OUTPUT"
        echo "vcpkg-dir=${{ github.workspace }}/vcpkg" >> "$GITHUB_OUTPUT"
    - name: Clang-Format check
      if: runner.os == 'Linux'
      run: |
        find ProjetSuperDur -type f \( -name "*.cpp" -o -name "*.hpp" \) | \
        xargs clang-format --dry-run --Werror -style=Microsoft
    - name: Clang-Format check
      if: runner.os == 'Windows'
      run: |
        $files = Get-ChildItem -Recurse -Include *.cpp,*.hpp -Path ProjetSuperDur
        foreach ($file in $files) {
          clang-format --dry-run --Werror -style=Microsoft $file.FullName
          if ($LASTEXITCODE -ne 0) {
            Write-Error "clang-format failed on $($file.FullName)"
          exit 1
          }
        }
      shell: pwsh

    - name: Install dependencies (Linux only)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get update && sudo apt-get install -y \
        ninja-build g++ curl zip unzip tar \
        autoconf automake libtool m4 pkg-config \
        libffi-dev libbz2-dev liblzma-dev libncurses5-dev \
        libreadline-dev libsqlite3-dev zlib1g-dev libssl-dev gettext clang-tidy autoconf-archive
    - name: Installer Clang-tidy
      if: runner.os == 'Windows'
      run: choco install -y llvm
        
    - name: Set up MSVC environment
      if: runner.os == 'Windows'
      uses: ilammy/msvc-dev-cmd@v1

    - name: Clone vcpkg
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        git clone https://github.com/microsoft/vcpkg.git ${{ steps.strings.outputs.vcpkg-dir }}
        ${{ steps.strings.outputs.vcpkg-dir }}/bootstrap-vcpkg.sh

    - name: Set CMake architecture flag (Windows only)
      if: matrix.os == 'windows-latest'
      run: echo "CMAKE_ARCH=-A ${{ matrix.architecture }}" >> $GITHUB_ENV
      
    - name: Configure CMake
      run: >
        cmake -B "${{ steps.strings.outputs.build-output-dir }}"
        -S "${{ github.workspace }}/ProjetSuperDur"
        -G "${{ matrix.generator }}"
        ${{ env.CMAKE_ARCH }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DCMAKE_TOOLCHAIN_FILE=${{ steps.strings.outputs.vcpkg-dir }}/scripts/buildsystems/vcpkg.cmake
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
        
    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: "${{ steps.strings.outputs.build-output-dir }}/ProjetSuperDurTest"
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --output-on-failure --build-config ${{ matrix.build_type }}
      
